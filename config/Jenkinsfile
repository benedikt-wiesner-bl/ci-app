pipeline {
    agent any
    options {
        skipDefaultCheckout(true) // verhindert doppeltes Checkout
    }

    environment {
        DOCKER_COMPOSE = "docker-compose -f config/docker-compose.yml"
        IMAGE_NAME = "ci-app:latest"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'git@github.com:benedikt-wiesner-bl/ci-app.git',
                    credentialsId: 'github-ci-key'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $IMAGE_NAME -f infrastructure/Dockerfile .'
            }
        }

        stage('Run Tests') {
            steps {
                sh 'docker run --rm $IMAGE_NAME pytest -q'
            }
        }

        stage('Security Scan with Trivy') {
            steps {
                sh """
                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $WORKSPACE:/workspace \
                aquasec/trivy:latest image \
                --exit-code 0 \
                --severity HIGH,CRITICAL \
                --format table \
                $IMAGE_NAME
                """

                sh """
                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $WORKSPACE:/workspace \
                aquasec/trivy:latest image \
                --format json \
                --output /workspace/trivy-report.json \
                $IMAGE_NAME
                """
            }
        }

        stage('Deploy New Version (Blue ‚Üî Green)') {
            steps {
                script {
                    // aktuelle Version aus Nginx-Config ermitteln
                    def current = sh(
                        script: "grep -o 'ci-app-[a-z]*' config/nginx/default.conf | head -n1",
                        returnStdout: true
                    ).trim()
                    def target = (current == "ci-app-blue") ? "ci-app-green" : "ci-app-blue"
                    def targetPort = (target == "ci-app-blue") ? "5001" : "5002"

                    echo "üîµ Aktuell: ${current}, üü¢ Ziel: ${target}"

                    // alte Target-Version stoppen & entfernen
                    sh """
                        $DOCKER_COMPOSE stop ${target} || true
                        $DOCKER_COMPOSE rm -f ${target} || true
                        $DOCKER_COMPOSE build ${target}
                        $DOCKER_COMPOSE up -d ${target}
                    """

                    // Healthcheck mit Retry (max 30s)
                    sh """
                    echo '‚è≥ Warte 5s bevor der Healthcheck startet...'
                    sleep 5
                    for i in \$(seq 1 15); do
                    if curl --silent --fail http://localhost:${targetPort}/health; then
                        echo '‚úÖ Healthcheck erfolgreich!'
                        exit 0
                    fi
                    echo "‚è≥ Versuch \$i fehlgeschlagen, retry in 3s..."
                    sleep 3
                    done
                    echo '‚ùå Healthcheck fehlgeschlagen!'
                    echo '--- Logs von ${target} ---'
                    docker logs ${target} || true
                    exit 1
"""



                    // Umschalten in Nginx
                    sh "sed -i 's/${current}/${target}/' config/nginx/default.conf"
                    sh "$DOCKER_COMPOSE exec -T nginx nginx -s reload"

                    echo "üîÄ Umschaltung von ${current} ‚Üí ${target} erfolgreich!"
                }
            }
        }

        stage('Cleanup Old (optional)') {
            steps {
                script {
                    echo "üßπ Alte Version bleibt erstmal aktiv f√ºr Rollback."
                    // Falls du sie sofort entfernen willst:
                    // sh "$DOCKER_COMPOSE stop ${current} || true"
                    // sh "$DOCKER_COMPOSE rm -f ${current} || true"
                }
            }
        }
    }

    post {
        always {
            sh 'docker ps -a'
            archiveArtifacts artifacts: '**/trivy-report.json', fingerprint: true, allowEmptyArchive: true
        }
        success {
            echo "‚úÖ Blue-Green Deployment erfolgreich!"
        }
        failure {
            echo "‚ùå Deployment fehlgeschlagen ‚Äì bitte Logs pr√ºfen!"
        }
    }
}
