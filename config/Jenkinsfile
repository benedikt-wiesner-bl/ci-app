pipeline {
    agent any
    options {
        skipDefaultCheckout(true)
    }

    environment {
        DOCKER_COMPOSE = "docker-compose -f config/docker-compose.yml"
        IMAGE_NAME = "ci-app:latest"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'git@github.com:benedikt-wiesner-bl/ci-app.git',
                    credentialsId: 'github-ci-key'
            }
        }

        stage('Code Quality') {
            agent {
                docker {
                    image 'python:3.11-slim'
                }
            }
            steps {
                sh 'pip install flake8'
                sh 'flake8 app/ --max-line-length=100 --statistics'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $IMAGE_NAME -f infrastructure/Dockerfile .'
            }
        }

        stage('Run Tests') {
            steps {
                sh 'docker run --rm $IMAGE_NAME pytest -q'
            }
        }

        stage('Trivy Scan') {
            steps {
                sh 'mkdir -p trivy-report'

                // Tabellen-Report direkt in der Console
                sh """
                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                aquasec/trivy:latest image \
                --exit-code 0 \
                --severity HIGH,CRITICAL \
                --format table \
                "$IMAGE_NAME"
                """

                // JSON-Report speichern
                sh """
                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $WORKSPACE:/workspace \
                aquasec/trivy:latest image \
                --format json \
                $IMAGE_NAME > trivy-report/trivy-report.json
                """
            }
        }

        stage('Trivy HTML Report') {
            steps {
                sh 'mkdir -p trivy-report'

                sh """
                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $WORKSPACE:/workspace \
                -v $WORKSPACE/config/trivy:/contrib \
                aquasec/trivy:latest image \
                --format template \
                --template /contrib/html.tpl \
                -o /workspace/trivy-report/trivy-report.html \
                $IMAGE_NAME
                """

                sh 'ls -l trivy-report || echo "⚠️ Trivy Reports fehlen!"'
            }
        }


        stage('Deploy New Version (Blue or Green)') {
            steps {
                script {
                    def current = sh(
                        script: "grep -o 'ci-app-[a-z]*' config/nginx/default.conf | head -n1",
                        returnStdout: true
                    ).trim()
                    def target = (current == "ci-app-blue") ? "ci-app-green" : "ci-app-blue"

                    echo "Aktuell: ${current}, Ziel: ${target}"

                    sh """
                        $DOCKER_COMPOSE stop ${target} || true
                        $DOCKER_COMPOSE rm -f ${target} || true
                        $DOCKER_COMPOSE build ${target}
                        $DOCKER_COMPOSE up -d ${target}
                    """

                    sh """
                    echo 'Warte 5s bevor der Healthcheck startet...'
                    sleep 5
                    for i in \$(seq 1 15); do
                      if docker exec nginx curl --silent --fail http://${target}:5000/health; then
                        echo 'Healthcheck erfolgreich!'
                        exit 0
                      fi
                      echo "Versuch \$i fehlgeschlagen, retry in 3s..."
                      sleep 3
                    done
                    echo 'Healthcheck fehlgeschlagen!'
                    echo '--- Logs von ${target} ---'
                    docker logs ${target} || true
                    exit 1
                    """

                    sh "sed -i 's/${current}/${target}/' config/nginx/default.conf"
                    sh "$DOCKER_COMPOSE exec -T nginx nginx -s reload"

                    echo "Umschaltung von ${current} → ${target} erfolgreich!"
                }
            }
        }

        stage('Cleanup Old') {
            steps {
                script {
                    echo "Alte Version bleibt erstmal aktiv für Rollback."
                }
            }
        }
    }

    post {
        always {
            sh 'docker ps -a'
            archiveArtifacts artifacts: 'trivy-report/*', fingerprint: true, allowEmptyArchive: true

            publishHTML(target: [
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'trivy-report',
                reportFiles: 'trivy-report.html',
                reportName: 'Trivy Security Report'
            ])
        }
        success {
            echo "✅ Blue-Green Deployment erfolgreich!"
        }
        failure {
            echo "❌ Deployment fehlgeschlagen - bitte Logs prüfen!"
        }
    }
}
