pipeline {
    agent any

    environment {
        DOCKER_COMPOSE = "docker-compose -f config/docker-compose.yml"
        IMAGE_NAME = "ci-app:latest"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'git@github.com:benedikt-wiesner-bl/ci-app.git',
                    credentialsId: 'github-ci-key'
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("${env.WORKSPACE}") {
                    sh 'docker build -t $IMAGE_NAME -f infrastructure/Dockerfile .'
                }
            }
        }

        stage('Run Tests') {
            steps {
                sh 'docker run --rm $IMAGE_NAME pytest -q'
            }
        }

        stage('Security Scan with Trivy') {
            steps {
                sh '''
                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $WORKSPACE:/workspace \
                aquasec/trivy:latest image \
                --exit-code 0 \
                --severity HIGH,CRITICAL \
                --format table \
                $IMAGE_NAME
                '''

                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $WORKSPACE:/workspace \
                aquasec/trivy:latest image \
                --format json \
                --output /workspace/trivy-report.json \
                $IMAGE_NAME
                '''
            }
        }

        stage('Deploy Green Version') {
            steps {
                sh '''
                    # baue und starte Green neu
                    $DOCKER_COMPOSE build ci-app-green
                    $DOCKER_COMPOSE up -d ci-app-green
                '''
            }
        }

        stage('Healthcheck Green') {
            steps {
                script {
                    // einfache Prüfung ob Green App antwortet
                    sh 'curl --fail http://localhost:5002/health || exit 1'
                }
            }
        }

        stage('Blue-Green Switch') {
            steps {
                script {
                    // Nginx Config von Blue auf Green umschalten
                    sh "sed -i 's/ci-app-blue/ci-app-green/' config/nginx/default.conf"
                    sh "$DOCKER_COMPOSE exec -T nginx nginx -s reload"
                }
            }
        }

        stage('Cleanup Old (optional)') {
            steps {
                sh '''
                    # Stoppe alte Blue-Version, wenn Green erfolgreich läuft
                    $DOCKER_COMPOSE stop ci-app-blue || true
                '''
            }
        }
    }

    post {
        always {
            sh 'docker ps -a'
            archiveArtifacts artifacts: '**/trivy-report.json', fingerprint: true, allowEmptyArchive: true
        }
        success {
            echo "✅ Blue-Green Deployment erfolgreich!"
        }
        failure {
            echo "❌ Deployment fehlgeschlagen – bitte Logs prüfen!"
        }
    }
}
